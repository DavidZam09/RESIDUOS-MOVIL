{"ast":null,"code":"var _jsxFileName = \"D:\\\\residuos-detector\\\\RESIDUOS_MOVIL\\\\movil\\\\src\\\\components\\\\ScanQR.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Html5QrcodeScanner } from 'html5-qrcode';\nimport './../styles.css'; // Archivo de estilos para el componente\nimport Toolbar from './Toolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ScanQR() {\n  _s();\n  const [qrData, setQrData] = useState(null); // Estado para almacenar los datos del QR\n  const navigate = useNavigate();\n  const scannerRef = useRef(null); // Referencia para el escáner\n  const usuarioId = 1; // ID del usuario (puedes obtenerlo dinámicamente si es necesario)\n\n  const updateNiveles = async pointsToAdd => {\n    try {\n      // Obtener los niveles actuales del usuario\n      const response = await fetch(`http://localhost:5000/api/niveles/${usuarioId}`);\n      const data = await response.json();\n      if (!data.success) {\n        console.error('Error al obtener los niveles:', data.message);\n        return;\n      }\n      const {\n        nivel_actual,\n        puntos_acumulados\n      } = data.data;\n\n      // Calcular los nuevos puntos y nivel\n      let nuevosPuntos = puntos_acumulados + pointsToAdd;\n      let nuevoNivel = nivel_actual;\n      if (nuevosPuntos >= 100) {\n        nuevoNivel += 1; // Incrementar el nivel\n        nuevosPuntos = nuevosPuntos - 100; // Restar los puntos que exceden 100\n      }\n\n      // Actualizar los niveles en la base de datos\n      const updateResponse = await fetch('http://localhost:5000/api/niveles', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          usuario_id: usuarioId,\n          nivel_actual: nuevoNivel,\n          puntos_acumulados: nuevosPuntos\n        })\n      });\n      const updateData = await updateResponse.json();\n      if (updateData.success) {\n        console.log('Niveles actualizados correctamente.');\n        navigate('/dashboard', {\n          state: {\n            pointsToAdd\n          }\n        }); // Redirige al Dashboard\n      } else {\n        console.error('Error al actualizar los niveles:', updateData.message);\n      }\n    } catch (error) {\n      console.error('Error al actualizar los niveles:', error);\n    }\n  };\n  useEffect(() => {\n    // Limpia el contenedor antes de inicializar el escáner\n    const readerElement = document.getElementById('reader');\n    if (readerElement) {\n      readerElement.innerHTML = ''; // Limpia cualquier contenido previo\n    }\n\n    // Inicializa el escáner\n    scannerRef.current = new Html5QrcodeScanner('reader',\n    // ID del contenedor donde se renderiza el escáner\n    {\n      fps: 10,\n      qrbox: 250\n    },\n    // Configuración del escáner\n    false);\n    scannerRef.current.render(decodedText => {\n      if (decodedText) {\n        setQrData(decodedText); // Almacena los datos escaneados\n        if (decodedText === '10') {\n          // Limpia el escáner antes de actualizar los niveles\n          scannerRef.current.clear().then(() => {\n            console.log('Escáner limpiado correctamente antes de actualizar niveles.');\n            updateNiveles(10); // Sumar 10 puntos\n          }).catch(error => {\n            console.error('Error al limpiar el escáner antes de actualizar niveles:', error);\n          });\n        }\n      }\n    }, error => {\n      console.error('Error al escanear el código QR:', error);\n    });\n\n    // Limpia el escáner al desmontar el componente\n    return () => {\n      if (scannerRef.current) {\n        scannerRef.current.clear().then(() => {\n          console.log('Escáner limpiado correctamente al desmontar.');\n        }).catch(error => {\n          console.error('Error al limpiar el escáner al desmontar:', error);\n        });\n      }\n    };\n  }, [navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scan-qr-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Escanear C\\xF3digo QR\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"reader\",\n      style: {\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), qrData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"qr-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Datos del QR:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: qrData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Toolbar, {\n      onNavigate: navigate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(ScanQR, \"tGC6L6dA+BIr48lvw7q8RU2Z09Q=\", false, function () {\n  return [useNavigate];\n});\n_c = ScanQR;\nexport default ScanQR;\nvar _c;\n$RefreshReg$(_c, \"ScanQR\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useNavigate","Html5QrcodeScanner","Toolbar","jsxDEV","_jsxDEV","ScanQR","_s","qrData","setQrData","navigate","scannerRef","usuarioId","updateNiveles","pointsToAdd","response","fetch","data","json","success","console","error","message","nivel_actual","puntos_acumulados","nuevosPuntos","nuevoNivel","updateResponse","method","headers","body","JSON","stringify","usuario_id","updateData","log","state","readerElement","document","getElementById","innerHTML","current","fps","qrbox","render","decodedText","clear","then","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","style","width","onNavigate","_c","$RefreshReg$"],"sources":["D:/residuos-detector/RESIDUOS_MOVIL/movil/src/components/ScanQR.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Html5QrcodeScanner } from 'html5-qrcode';\r\nimport './../styles.css'; // Archivo de estilos para el componente\r\nimport Toolbar from './Toolbar';\r\n\r\nfunction ScanQR() {\r\n  const [qrData, setQrData] = useState(null); // Estado para almacenar los datos del QR\r\n  const navigate = useNavigate();\r\n  const scannerRef = useRef(null); // Referencia para el escáner\r\n  const usuarioId = 1; // ID del usuario (puedes obtenerlo dinámicamente si es necesario)\r\n\r\n  const updateNiveles = async (pointsToAdd) => {\r\n    try {\r\n      // Obtener los niveles actuales del usuario\r\n      const response = await fetch(`http://localhost:5000/api/niveles/${usuarioId}`);\r\n      const data = await response.json();\r\n\r\n      if (!data.success) {\r\n        console.error('Error al obtener los niveles:', data.message);\r\n        return;\r\n      }\r\n\r\n      const { nivel_actual, puntos_acumulados } = data.data;\r\n\r\n      // Calcular los nuevos puntos y nivel\r\n      let nuevosPuntos = puntos_acumulados + pointsToAdd;\r\n      let nuevoNivel = nivel_actual;\r\n\r\n      if (nuevosPuntos >= 100) {\r\n        nuevoNivel += 1; // Incrementar el nivel\r\n        nuevosPuntos = nuevosPuntos - 100; // Restar los puntos que exceden 100\r\n      }\r\n\r\n      // Actualizar los niveles en la base de datos\r\n      const updateResponse = await fetch('http://localhost:5000/api/niveles', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          usuario_id: usuarioId,\r\n          nivel_actual: nuevoNivel,\r\n          puntos_acumulados: nuevosPuntos,\r\n        }),\r\n      });\r\n\r\n      const updateData = await updateResponse.json();\r\n\r\n      if (updateData.success) {\r\n        console.log('Niveles actualizados correctamente.');\r\n        navigate('/dashboard', { state: { pointsToAdd } }); // Redirige al Dashboard\r\n      } else {\r\n        console.error('Error al actualizar los niveles:', updateData.message);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al actualizar los niveles:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Limpia el contenedor antes de inicializar el escáner\r\n    const readerElement = document.getElementById('reader');\r\n    if (readerElement) {\r\n      readerElement.innerHTML = ''; // Limpia cualquier contenido previo\r\n    }\r\n\r\n    // Inicializa el escáner\r\n    scannerRef.current = new Html5QrcodeScanner(\r\n      'reader', // ID del contenedor donde se renderiza el escáner\r\n      { fps: 10, qrbox: 250 }, // Configuración del escáner\r\n      false\r\n    );\r\n\r\n    scannerRef.current.render(\r\n      (decodedText) => {\r\n        if (decodedText) {\r\n          setQrData(decodedText); // Almacena los datos escaneados\r\n          if (decodedText === '10') {\r\n            // Limpia el escáner antes de actualizar los niveles\r\n            scannerRef.current.clear().then(() => {\r\n              console.log('Escáner limpiado correctamente antes de actualizar niveles.');\r\n              updateNiveles(10); // Sumar 10 puntos\r\n            }).catch((error) => {\r\n              console.error('Error al limpiar el escáner antes de actualizar niveles:', error);\r\n            });\r\n          }\r\n        }\r\n      },\r\n      (error) => {\r\n        console.error('Error al escanear el código QR:', error);\r\n      }\r\n    );\r\n\r\n    // Limpia el escáner al desmontar el componente\r\n    return () => {\r\n      if (scannerRef.current) {\r\n        scannerRef.current.clear().then(() => {\r\n          console.log('Escáner limpiado correctamente al desmontar.');\r\n        }).catch((error) => {\r\n          console.error('Error al limpiar el escáner al desmontar:', error);\r\n        });\r\n      }\r\n    };\r\n  }, [navigate]);\r\n\r\n  return (\r\n    <div className=\"scan-qr-container\">\r\n      <h2>Escanear Código QR</h2>\r\n      <div id=\"reader\" style={{ width: '100%' }}></div>\r\n      {qrData && (\r\n        <div className=\"qr-result\">\r\n          <h3>Datos del QR:</h3>\r\n          <p>{qrData}</p>\r\n        </div>\r\n      )}\r\n      {/* Toolbar */}\r\n      <Toolbar onNavigate={navigate} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScanQR;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}