{"ast":null,"code":"var _jsxFileName = \"D:\\\\residuos-detector\\\\RESIDUOS_MOVIL\\\\movil\\\\src\\\\components\\\\Notifications.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport './../styles.css'; // Archivo de estilos para el componente\nimport Toolbar from './Toolbar';\nimport { useNavigate } from 'react-router-dom'; // Importar useNavigate para la navegación\nimport { NotificationsContext } from '../context/NotificationsContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Notifications() {\n  _s();\n  const [alerts, setAlerts] = useState([]); // Estado para almacenar las alertas\n  const [error, setError] = useState(''); // Estado para manejar errores\n  const navigate = useNavigate(); // Hook para la navegación\n  const {\n    setUnreadCount\n  } = useContext(NotificationsContext); // Acceder al contexto\n\n  useEffect(() => {\n    // Función para obtener las alertas desde la base de datos\n    const fetchAlerts = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/alertas');\n        if (!response.ok) {\n          throw new Error('Error al obtener las alertas');\n        }\n        const data = await response.json();\n        if (data.success) {\n          setAlerts(data.data); // Almacenar las alertas obtenidas\n          // Actualizar el contador de notificaciones no leídas\n          const unreadCount = data.data.filter(alert => !alert.leido).length;\n          setUnreadCount(unreadCount);\n        }\n      } catch (err) {\n        console.error('Error al obtener las alertas:', err);\n        setError('No se pudieron cargar las alertas');\n      }\n    };\n    fetchAlerts();\n  }, [setUnreadCount]);\n\n  // Función para marcar una notificación como leída\n  const markAsRead = async id => {\n    try {\n      await fetch(`http://127.0.0.1:9000/api/alertas/${id}/marcar-leida`, {\n        method: 'PUT'\n      });\n\n      // Actualizar el estado local para reflejar el cambio\n      setAlerts(prevAlerts => prevAlerts.map(alert => alert.id === id ? {\n        ...alert,\n        leido: true\n      } : alert));\n\n      // Actualizar el contador de notificaciones no leídas\n      setUnreadCount(prevCount => Math.max(prevCount - 1, 0));\n    } catch (err) {\n      console.error('Error al marcar la alerta como leída:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notifications-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Notificaciones\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 23\n    }, this), alerts.length === 0 && !error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No hay alertas disponibles\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 47\n    }, this), alerts.map(alert => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `notification-item ${alert.leido ? 'read' : 'unread'}`,\n      onClick: () => markAsRead(alert.id),\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Mensaje:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 24\n        }, this), \" \", alert.mensaje]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"IP:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 24\n        }, this), \" \", alert.ip]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Ubicaci\\xF3n:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 24\n        }, this), \" \", alert.ubicacion]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Estado:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 24\n        }, this), \" \", alert.leido ? 'Leído' : 'No leído']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Fecha:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 24\n        }, this), \" \", new Date(alert.fecha_alerta).toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this)]\n    }, alert.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(Toolbar, {\n      onNavigate: navigate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s(Notifications, \"jvElw0+tOIB/ywj+yV1beOs9eWU=\", false, function () {\n  return [useNavigate];\n});\n_c = Notifications;\nexport default Notifications;\nvar _c;\n$RefreshReg$(_c, \"Notifications\");","map":{"version":3,"names":["React","useEffect","useState","useContext","Toolbar","useNavigate","NotificationsContext","jsxDEV","_jsxDEV","Notifications","_s","alerts","setAlerts","error","setError","navigate","setUnreadCount","fetchAlerts","response","fetch","ok","Error","data","json","success","unreadCount","filter","alert","leido","length","err","console","markAsRead","id","method","prevAlerts","map","prevCount","Math","max","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","mensaje","ip","ubicacion","Date","fecha_alerta","toLocaleString","onNavigate","_c","$RefreshReg$"],"sources":["D:/residuos-detector/RESIDUOS_MOVIL/movil/src/components/Notifications.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport './../styles.css'; // Archivo de estilos para el componente\r\nimport Toolbar from './Toolbar';\r\nimport { useNavigate } from 'react-router-dom'; // Importar useNavigate para la navegación\r\nimport { NotificationsContext } from '../context/NotificationsContext';\r\n\r\nfunction Notifications() {\r\n    const [alerts, setAlerts] = useState([]); // Estado para almacenar las alertas\r\n    const [error, setError] = useState(''); // Estado para manejar errores\r\n    const navigate = useNavigate(); // Hook para la navegación\r\n    const { setUnreadCount } = useContext(NotificationsContext); // Acceder al contexto\r\n\r\n    useEffect(() => {\r\n        // Función para obtener las alertas desde la base de datos\r\n        const fetchAlerts = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:5000/api/alertas');\r\n                if (!response.ok) {\r\n                    throw new Error('Error al obtener las alertas');\r\n                }\r\n                const data = await response.json();\r\n\r\n                if (data.success) {\r\n                    setAlerts(data.data); // Almacenar las alertas obtenidas\r\n                    // Actualizar el contador de notificaciones no leídas\r\n                    const unreadCount = data.data.filter(alert => !alert.leido).length;\r\n                    setUnreadCount(unreadCount);\r\n                }\r\n            } catch (err) {\r\n                console.error('Error al obtener las alertas:', err);\r\n                setError('No se pudieron cargar las alertas');\r\n            }\r\n        };\r\n\r\n        fetchAlerts();\r\n    }, [setUnreadCount]);\r\n\r\n    // Función para marcar una notificación como leída\r\n    const markAsRead = async (id) => {\r\n        try {\r\n            await fetch(`http://127.0.0.1:9000/api/alertas/${id}/marcar-leida`, {\r\n                method: 'PUT',\r\n            });\r\n\r\n            // Actualizar el estado local para reflejar el cambio\r\n            setAlerts(prevAlerts =>\r\n                prevAlerts.map(alert =>\r\n                    alert.id === id ? { ...alert, leido: true } : alert\r\n                )\r\n            );\r\n\r\n            // Actualizar el contador de notificaciones no leídas\r\n            setUnreadCount(prevCount => Math.max(prevCount - 1, 0));\r\n        } catch (err) {\r\n            console.error('Error al marcar la alerta como leída:', err);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"notifications-container\">\r\n            <h2>Notificaciones</h2>\r\n            {error && <p className=\"error-message\">{error}</p>}\r\n            {alerts.length === 0 && !error && <p>No hay alertas disponibles</p>}\r\n            {alerts.map(alert => (\r\n                <div\r\n                    key={alert.id}\r\n                    className={`notification-item ${alert.leido ? 'read' : 'unread'}`}\r\n                    onClick={() => markAsRead(alert.id)}\r\n                >\r\n                    <p><strong>Mensaje:</strong> {alert.mensaje}</p>\r\n                    <p><strong>IP:</strong> {alert.ip}</p>\r\n                    <p><strong>Ubicación:</strong> {alert.ubicacion}</p>\r\n                    <p><strong>Estado:</strong> {alert.leido ? 'Leído' : 'No leído'}</p>\r\n                    <p><strong>Fecha:</strong> {new Date(alert.fecha_alerta).toLocaleString()}</p>\r\n                </div>\r\n            ))}\r\n            {/* Toolbar */}\r\n            <Toolbar onNavigate={navigate} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notifications;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}